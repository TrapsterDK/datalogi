[tool.poetry]
name = "Datalogi"
version = "0.1.0"
description = "Automate the videos creation process in multiple different ways"
authors = ["Martin Jacobsen <martin.kuntz.jacobsen@gmail.com>"]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Private :: Do Not Upload",
]

[tool.poetry.scripts]
# Add any scripts here that you want to be installed as part of your package.

[tool.poetry.dependencies]
python = "^3.11"
jinja2 = "^3.1.2"


[tool.poetry.group.nox.dependencies]
nox-poetry = "*"


[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"


[tool.poetry.group.lint.dependencies]
ruff = "*"


[tool.poetry.group.fmt.dependencies]
black = "*"


[tool.poetry.group.type_check.dependencies]
mypy = "*"


[tool.poetry.group.docs.dependencies]
mkdocs-material = "*"
mkdocstrings = {extras = ["python"], version = "*"}
mkdocs-gen-files = "*"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
ignore_missing_imports = true
strict = true
explicit_package_bases = true


[tool.ruff]
line-length = 99
target-version = "py311"
select = [
    "ALL"
]
# extend-select = [
#     "I", # isort
#     "N", # pep8-naming
#     "UP", # pyupgrade
#     "RUF", # ruff
#     "B", # flake8-bugbear
#     "C4", # flake8-comprehensions
#     "PTH", # flake8-use-pathlib
#     "SIM", # flake8-simplify
#     "TID", # flake8-tidy-imports
# ]
ignore = [
    "D407", # Missing dashed underline after section
    "D203", # 1 blank line required before class docstring conflict with D211
    "D213", # Multi-line docstring summary should start at the first line conflict with D212
]
src = ["src"]

[tool.ruff.isort]
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument"]

[tool.ruff.extend-per-file-ignores]
"docs/gen_ref_pages.py" = ["INP001"]
"tests/*" = ["S101"]

[tool.black]
line-length = 99
target-version = ["py311"]
# black will automatically exclude all files listed in .gitignore
# If you need to exclude additional folders, consider using extend-exclude to avoid disabling the
# default .gitignore behaviour.

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning supressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    # Skip any pass lines such as may be used for @abstractmethod
    "pass",

    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "if __debug__",

    # Don't complain if tests don't hit defensive assertion code:s
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:"
]
ignore_errors = true